<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>XWikiTubeCode</web>
  <name>VideoUploadGroovy</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>XWikiTubeCode.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1445335303000</creationDate>
  <date>1445934490000</date>
  <contentUpdateDate>1445934490000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>/**
* Groovy class : VideoUpload 
* This class is used to upload and transcode videos.
*/

import java.io.File;
import java.io.FileOutputStream;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.FileUtils;
import javax.activation.MimetypesFileTypeMap;
import org.xwiki.environment.Environment;
import java.util.Date;

class VideoUploadClass
{
   def xwiki;
   def xcontext;
   def services;
   def userName;
   def fileUploader;
   def mediaTranscoder;
   def commandRunner;
   def mediaClass = "XWikiTubeCode.MediaClass";
   def xwikiTubeTmpDir;
   def userXWikiTubeDir;
   FilenameUtils fileNameUtils;
   FileUtils FileUtils;

   /** Initialize the class */
   void init(xwiki, xcontext, services)
   {
      this.xwiki = xwiki;
      this.xcontext = xcontext;
      this.services = services;
      this.userName = xwiki.getDocument(xcontext.getUser()).getName();
      this.fileUploader = xwiki.fileupload;
      this.commandRunner = services.commandRunner;
      this.mediaTranscoder = xwiki.parseGroovyFromPage("XWikiTubeCode.MediaTranscoderGroovy")
      this.mediaTranscoder.init(xwiki, xcontext, services);
      this.fileNameUtils = new FilenameUtils();
      this.fileUtils = new FileUtils();
      // Check if there is an XWikiTube directory in the file system for the current user, if not create it
      Object env = services.component.getInstance(Environment.class);
      File tmpDir = env.getTemporaryDirectory();
      //this.xwikiTubeTmpDir = this.fileNameUtils.concat(tmpDir.getPath(), "xwikitube");
      this.xwikiTubeTmpDir = tmpDir.getPath();
      if(!this.checkDirExists(this.xwikiTubeTmpDir)){
         // Add the xwikitube directory to the temp directory
         File dir = new File(this.xwikiTubeTmpDir, "xwikitube");
         if (!dir.mkdir()) { throw new RuntimeException("failed to make directory: " + this.xwikiTubeTmpDir); }
      }
      this.userXWikiTubeDir = this.getUserXWikiTubeDir();
   }
   
   /**
   * Check if a directory exists in the filesytem
   *
   * @dirPath the path of the directory
   * @return true if the directory exist, false otherwise
   */
   boolean checkDirExists(dirPath){
      File dir = new File(dirPath);
      return dir.exists();
   }

   /**
   * Check if a file exists in the filesytem
   *
   * @fileDir the directory containing the file
   * @filePath the name of the file
   * @return true if the file exist, false otherwise
   */
   boolean checkFileExists(fileDir, fileName = ""){
      File file;
      if(fileName == ""){
         file = new File(fileDir);
      }
      else
      {
         file = new File(fileDir, fileName);
      }
      return file.exists();
   }

   /**
   * Check if the XWikitube directory of the current user exists in the filesytem,if not create it.
   *
   * @user the documentReference of the user, by default the current user.
   * @return the path of the user's XWikiTube directory
   */
   def getUserXWikiTubeDir(user = xcontext.getUser()){
      String userXWikiTubeDir = "";
      def xwikiTubeDir = this.xwikiTubeTmpDir;
      if(!this.checkDirExists(xwikiTubeDir)){
         File dir = new File(xwikiTubeDir);
         if (!dir.mkdir()) { throw new RuntimeException("failed to make directory"); }
      }
      // Check if the XWikitube user directory exists
      if(xwiki.exists(user)){
         userXWikiTubeDir = this.xwikiTubeTmpDir + '/' + user;
         if(!this.checkDirExists(userXWikiTubeDir)){
            File userDir = new File(this.xwikiTubeTmpDir, user);
            if (!userDir.mkdir()) { throw new RuntimeException("failed to make directory"); }
         }
      }
      return userXWikiTubeDir;
   }        

   /**
   * create a file from byte code
   * 
   * @param fileDir the directory containing the file
   * @param fileName the name of the file
   * @param byteCode the byte code of the file
   * @return a boolean that indicates if the file wa created or not.
   */
   boolean createFileFromByteCode(String fileDir, String fileName, byte[] byteCode){
      File file = new File(fileDir, fileName);
      FileOutputStream fos = new FileOutputStream(file);
      fos.write(byteCode);
      return this.checkFileExists(fileDir, fileName);
   }

   /**
   * create a file from InputStream
   *
   * @param fileDir the directory containing the file
   * @param fileName the name of the file
   * @param inputStream the inputStream of the file
   * @return a boolean that indicates if the file wa created or not.
   */
   boolean createFileFromInputStream(String fileDir, String fileName, InputStream inputStream){
      File file = new File(fileDir, fileName);
      this.fileUtils.copyInputStreamToFile(inputStream, file);
      return this.checkFileExists(fileDir, fileName);
   }

   /**
   * Create a temporary video transcoding directory
   *
   * @param fileName the name of the source file
   * @return the File object corresponding to the directory.
   */
   def createVideoTranscodingDir(fileName) {
      File videoDir;
      if(!this.checkFileExists(userXWikiTubeDir, fileName)){
        // Create the file
        videoDir = new File(userXWikiTubeDir, fileName);
      }
      else
      {
         videoDir = new File(userXWikiTubeDir, fileName + "_" + new Date().getTime() + "_" + xwiki.generateRandomString(10));
      }
      return videoDir;
   }

   /**
   * Upload a video
   * 
   * @param formFieldName the file input name
   * @param targetDocRef the document reference of target xwiki document in which the videos will be attached.
   * @param encodeVideo boolean that indicate to encode the video or not (Default value: false)
   * @return true if the upload is succesfull, false if the upload failed.
   */
   def uploadVideo(formFieldName, targetDocRef = "", encodeVideo = false){
      def rep = ["ret": false, "error": ""];
      def fileItems = this.fileUploader.getFileItems();
      for(item in fileItems){
        if(item.getFieldName() == formFieldName){
            def fileName = item.getName().replaceAll("[^a-zA-Z0-9.-]", "_");
            File videoDir = this.createVideoTranscodingDir(fileName);
            InputStream inputStream = item.getInputStream();
            if (!videoDir.mkdir()) { throw new RuntimeException("failed to make directory"); }
            rep["ret"] = this.createFileFromInputStream(videoDir.getPath(), fileName, inputStream);
            def filePath = this.fileNameUtils.concat(videoDir.getPath(), fileName);
            rep["video"] = this.getVideoInfo(filePath);
            rep["video"]["original"] = 1;
            // Create an XWikiTube entry for the uploaded video
            rep["video"]["videoDocRef"] = this.createVideoEntry(rep["video"], targetDocRef);
            this.attachFileToDoc(rep["video"]["videoDocRef"], rep["video"]["name"], filePath);
        }
      }
      return rep;
   }
   
   /**
   * Attach file to doc
   *
   * @param docRef target document reference
   * @param path file path to attach
   */
   def attachFileToDoc(docRef, fileName, path){
      if(docRef != "" &amp;&amp; xwiki.exists(docRef)){
         def vdoc = xwiki.getDocument(docRef);
         if(this.checkFileExists(path)){
            File file = new File(path);
            InputStream targetStream = new FileInputStream(file);
            vdoc.addAttachment(fileName, targetStream);
            vdoc.save();
         }
      }
   }

   /**
   * Create video object
   * @param videoInfo the video information
   * @return the video document reference
   */
   def createVideoEntry(videoInfo, videoDocRef = ""){
      def rep = "";
      if(videoInfo){
         def videoDoc;
         if(videoDocRef == ""){
            def space = "XWikiTube" + userName;
            def docName = xwiki.getUniquePageName(space, this.fileNameUtils.getBaseName(videoInfo["name"]));
            videoDocRef = space + "." + docName;
            videoDoc = xwiki.getDocument(videoDocRef);
         }
         else
         {
            if(xwiki.exists(videoDocRef)){
               videoDoc = xwiki.getDocument(videoDocRef);
            }
         }
         // Attache the video object
         if(videoDoc){
            def videoID = videoDoc.createNewObject(mediaClass);
            def videoObj = videoDoc.getObject(mediaClass, videoID);
            if(videoInfo.name){videoObj.set("name", videoInfo.name);}
            if(videoInfo.dirPath){videoObj.set("dirPath", videoInfo.dirPath);}
            if(videoInfo.extension){videoObj.set("extension", videoInfo.extension);}
            if(videoInfo.mimeType){videoObj.set("mimeType", videoInfo.mimeType);}
            if(videoInfo.resolution){videoObj.set("resolution", videoInfo.resolution);}
            if(videoInfo.size){videoObj.set("size", videoInfo.size);}
            if(videoInfo.duration){videoObj.set("duration", videoInfo.duration);}
            if(videoInfo.bitrate){videoObj.set("bitrate", videoInfo.bitrate);}
            if(videoInfo.original){videoObj.set("original", videoInfo.original);}
            videoDoc.save();
            rep = videoDocRef;
         }
      }
      return rep;
   }
   
   /**
   * Encode media
   * @param videoDocRef the video document reference of the source video
   * @param videoCodec the video codec will be used to encode the video
   * @param settings encoding settings
   */
   void encodeVideo(videoDocRef, videoCodec, settings = null){
      if(videoDocRef != "" &amp;&amp; xwiki.exists(videoDocRef)){
         def videoDoc = xwiki.getDocument(videoDocRef);
         def sourceVideoObject = videoDoc.getObject("XWikiTubeCode.MediaClass", "original", "1");
         if(sourceVideoObject){
            def videoName = sourceVideoObject.getValue("name");
            def dirPath = sourceVideoObject.getValue("dirPath");
            def path = this.fileNameUtils.concat(dirPath, videoName);
            this.mediaTranscoder.encodeVideo(path, dirPath, videoCodec, settings);
            // Attach generated videos to the document document
            def files = this.getDirectoryFiles(dirPath);
            for(file in files){
               if(file.getName() != videoName){
                  def video = this.getVideoInfo(file.getPath());
                  // Attach MediaClass object on to video document that describe the video
                  this.attachFileToDoc(videoDocRef, file.getName(), file.getPath());
                  if(file.getName() != "audio_128k.webm" &amp;&amp; file.getName() != "manifest.mpd" &amp;&amp; file.getName() != "video.flv"){
                     this.createVideoEntry(video, videoDocRef);
                  }
               }
            }
         }
      }
    }

   /**
   * Encode attachment video using URL
   * @param videoDocRef the video document reference of the source video
   * @param videoName the video attachment name
   * @param videoCodec the video codec will be used to encode the video
   * @param settings encoding settings
   */
   def encodeAttachmentVideoUsingURL(videoDocRef, videoName, videoCodec = "libvpx-vp9", settings = null){
      def rep = ["ret": false, "error": ""];
      if(videoDocRef != "" &amp;&amp; xwiki.exists(videoDocRef)){
         def videoDoc = xwiki.getDocument(videoDocRef);
         def att = videoDoc.getAttachment(videoName);
         if(att){
            def videoURL = xcontext.getURLFactory().createAttachmentURL(videoName, videoDoc.getSpace(), videoDoc.getName(), "download", "", xcontext.context).toString();
            // Create a temporary directory that will contains the transcoding files
            def fileName = videoName.replaceAll("[^a-zA-Z0-9.-]", "_");
            File videoDir = this.createVideoTranscodingDir(fileName);
            if (!videoDir.mkdir()) { throw new RuntimeException("failed to make directory"); }
            def dirPath = videoDir.getPath();
            // Attach a vide object to the document that describes the original video
            this.createVideoEntry(this.getVideoInfo(videoURL, videoName, true), videoDocRef);
            this.mediaTranscoder.encodeVideo(videoURL, dirPath, videoCodec, settings);
            // Attach generated videos to the document document
            def files = this.getDirectoryFiles(dirPath);
            for(file in files){
               if(file.getName() != videoName){
                  def video = this.getVideoInfo(file.getPath());
                  // Attach MediaClass object on to video document that describe the video
                  this.attachFileToDoc(videoDocRef, file.getName(), file.getPath());
                  if(file.getName() != "audio_128k.webm" &amp;&amp; file.getName() != "manifest.mpd" &amp;&amp; file.getName() != "video.flv"){
                     this.createVideoEntry(video, videoDocRef);
                  }
               }
            }
            rep.ret = true;
         }
         else
         {
            rep.error = "attachment_not_found!";
         }
      }
      else
      {
         rep.error = "document_not_found!";
      }
      return rep;
    }

   /**
   * Encode attachment video
   * @param videoDocRef the video document reference of the source video
   * @param attName the video attachment name
   * @param videoCodec the video codec will be used to encode the video
   * @param settings encoding settings
   */
   def encodeAttachmentVideo(videoDocRef, attName, videoCodec = "libvpx-vp9", settings = null){
      def rep = ["ret": false, "error": ""];
      if(videoDocRef != "" &amp;&amp; xwiki.exists(videoDocRef)){
         def videoDoc = xwiki.getDocument(videoDocRef);
         def att = videoDoc.getAttachment(attName);
         if(att){
            // Create a temporary directory that will contains the transcoding files
            def videoName = attName.replaceAll("[^a-zA-Z0-9.-]", "_");
            File videoDir = this.createVideoTranscodingDir(videoName);
            if (!videoDir.mkdir()) { throw new RuntimeException("failed to make directory"); }
            def dirPath = videoDir.getPath();
            // Copy the attachment video to the video temp dir
            def videoPath = this.fileNameUtils.concat(dirPath, videoName);
            IOUtils.copy(videoDoc.getAttachment(attName).getContentInputStream(), new FileOutputStream(videoPath) );
            // Attach a video object to the document that describes the original video
            def originalVideoInfo = this.getVideoInfo(videoPath);
            originalVideoInfo["original"] = 1;
            this.createVideoEntry(originalVideoInfo, videoDocRef);
            // Generate all ffmpeg encoding commands
            def commands = this.mediaTranscoder.generateEncodingCommands(videoPath, dirPath, videoCodec, settings);
            for(cmd in commands){
               // Attach a command object to the document
                def cmdID = videoDoc.createNewObject("XWikiTubeCode.CommandClass");
                def cmdObj = videoDoc.getObject("XWikiTubeCode.CommandClass", cmdID);
                cmdObj.set("cmd", cmd.command);
                cmdObj.set("workDir", cmd.workDir);
                cmdObj.set("outputFile", cmd.outputFile);
                cmdObj.set("status", "waiting");
                cmdObj.set("duration", originalVideoInfo.duration);// Video duration converted to microseconds
                videoDoc.save();
            }
            rep.ret = true;
         }
         else
         {
            rep.error = "attachment_not_found";
         }
      }
      else
      {
         rep.error = "document_not_found";
      }
      return rep;
    }

   /**
   * Attach encoding files to XWiki document
   */
   def attachEncodingFilesToDoc(videoDir, videoDocRef, videoName){
      def rep = true;
      if(xwiki.exists(videoDocRef) &amp;&amp; this.checkDirExists(videoDir)){
         // Attach generated videos to the document document
         def files = this.getDirectoryFiles(videoDir);
         for(file in files){
            if(file.getName() != videoName &amp;&amp; !file.getName().endsWith(".txt")){
               def video = this.getVideoInfo(file.getPath());
               // Attach MediaClass object on to video document that describe the video
               this.attachFileToDoc(videoDocRef, file.getName(), file.getPath());
               if(file.getName() != "audio_128k.webm" &amp;&amp; file.getName() != "manifest.mpd" &amp;&amp; file.getName() != "video.flv"){
                  this.createVideoEntry(video, videoDocRef);
               }
            }
         }
         // Update the video object on the document
         def videoDoc = xwiki.getDocument(videoDocRef);
         def originalVideoObj = videoDoc.getObject(mediaClass, "original", "1");
         if(originalVideoObj){
            originalVideoObj.set("encoded", 1);
            videoDoc.save();
         }
      }
      else
      {
         rep = false;
      }
      return rep;
   }

   /**
   * Get directory files
   * @param dirPath directory path
   * @return List of File objects
   */
   def getDirectoryFiles(dirPath){
      if(this.checkDirExists(dirPath)){
         return this.fileUtils.listFiles(new File(dirPath), null, true);
      }
      else
      {
       return [];
      }
   }

   /**
   * Delete media
   * @param mediaDocRef the document reference of the media
   * @return a true if succes, false otherwise
   */
   def deleteMedia(mediaDocRef){
      def rep = false;
      if(mediaDocRef &amp;&amp; mediaDocRef != "" &amp;&amp; xwiki.exists(mediaDocRef)){
         def mediaDoc = xwiki.getDocument(mediaDocRef);
         def mediaObject = mediaDoc.getObject(mediaClass);
         if(mediaObject){
            def dirPath = mediaObject.getValue("dirPath");
            try{
               // Remove all related files
               fileUtils.deleteQuietly(new File(dirPath));
               // Remove Document
               def targetDoc = mediaDoc.getDocument();
               def attachmentStore = xwiki.getXWiki().getAttachmentStore();
               for (attachment in targetDoc.getAttachmentList()){
                  attachmentStore.deleteXWikiAttachment(attachment, false, xcontext.context, true);
               }
               xwiki.getXWiki().deleteDocument(targetDoc, false, xcontext.context);
               rep = true;
            }
            catch(IOException ioe){
            }
         }
      }
      return rep;
   }
   
   /**
   * Get media URL from Path
   *
   * @param path the media path
   * @return the media url
   */
   def getMediaURL(path){
      File[] medias = new File[1];
      medias[0] = new File(path);
      def URLs = this.fileUtils.toURLs(medias);
      return (medias &amp;&amp; medias.length &gt; 0) ? medias[0]: "";
   } 

   /**
   * Get video information
   * 
   * @param videoPath the file of the video
   * @return the video information
   */
   def getVideoInfo(videoPath, videoName = "", isURL = false){
      def rep = [:];
      if(isURL || (!isURL &amp;&amp; this.checkFileExists(videoPath))){
         rep["path"] = videoPath;
         rep["dirPath"] = isURL ? "" : '/' + this.fileNameUtils.getPath(rep["path"]);
         rep["name"] = isURL ? videoName : this.fileNameUtils.getName(rep["path"]);
         rep["extension"]  = isURL ? "" : this.fileNameUtils.getExtension(rep["name"]);
         if(!isURL){
            File videoFile = new File(videoPath);
            rep["size"] = this.fileUtils.sizeOf(videoFile);
            rep["sizeMB"] = (rep["size"]/(1000*1000)).toString();
            MimetypesFileTypeMap mimeTypesMap = new MimetypesFileTypeMap();
            rep["mimeType"] = mimeTypesMap.getContentType(videoFile);
         }
         else
         {
            rep["size"] = this.mediaTranscoder.getVideoSize(videoPath);
            rep["sizeMB"] = this.mediaTranscoder.getVideoSize(videoPath, "MB");
            rep["mimeType"] = "";//TODO
         }
         // Get the video resolution and duration
         rep["resolution"] = this.mediaTranscoder.getVideoResolution(videoPath,'s');
         rep["arrayResolution"] = this.mediaTranscoder.getVideoResolution(videoPath);
         rep["duration"] = this.mediaTranscoder.getVideoDuration(videoPath, 's');
         rep["hmsDuration"] = this.mediaTranscoder.getVideoDuration(videoPath, 'hms');
         rep["bitrate"] = this.mediaTranscoder.getVideoBitrate(videoPath);
         rep["original"] = 0;
         rep["encoded"] = 0;
      }
      return rep;
   }

   /**
   * Delete directory
   * 
   * @param dirPath Directory path
   */
   def deleteDir(dirPath){
      def rep = false;
      if(this.checkDirExists(dirPath)){
         try{
            this.fileUtils.deleteQuietly(new File(dirPath));
            rep = true;
         }
         catch(IOException ioe){
         }
      }
      return rep;
   }

   /**
   * Clear temp directory
   * 
   */
   def clearTmpDir(){
      def rep = false;
      if(this.checkDirExists(this.xwikiTubeTmpDir)){
         try{
            this.fileUtils.deleteQuietly(new File(this.xwikiTubeTmpDir));
            rep = true;
         }
         catch(IOException ioe){
         }
      }
      return rep;
   }

   /**
   * Check encoding progress
   *
   * @param outputFilePath the path of the file containing the output result of a command
   * @param duration the duration of the original video, used to compute the progress of video/audio streams
   * @return a map (status, currentTime, progress)
   */
   def checkEncodingProgress(outputFilePath, duration){
      if(this.checkFileExists(outputFilePath)){
         def durationMS = (duration * 1000000).toLong(); // Duration in Micro S
         def status = "";
         def currentTime = "";
         File f = new File(outputFilePath);
         def it = this.fileUtils.lineIterator(f);
         while (it.hasNext()) {
            String line = it.nextLine();
            if(line.contains("progress=")){
               status = line.replace("progress=", "");
            }
            else if(line.contains("out_time_ms=")){
               currentTime = line.replace("out_time_ms=", "");
            }
         }
         def currentTimeMS = currentTime.toLong();
         def progress = Math.round((currentTimeMS/durationMS) * 100);
         return ["status": status, "currentTime": currentTimeMS, "progress": progress];
       }
      else
      {
         return ["status": "output_file_not_found"];
      }
   }
}</content>
</xwikidoc>
