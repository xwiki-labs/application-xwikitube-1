<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>XWikiTubeCode</web>
  <name>VideoUpload</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>XWikiTubeCode.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1445335012000</creationDate>
  <date>1445596385000</date>
  <contentUpdateDate>1445596385000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>XWikiTubeCode.VideoUpload</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>20da9a8f-a4c8-4ad3-833d-25ba9fd2697a</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#set($ajaxActionsURL = $xwiki.getURL("XWikiTubeCode.VideoUpload", "view", "xpage=plain&amp;outputSyntax=plain"))
var ajaxActionsURL = "$ajaxActionsURL";
var initVideoEncodingURL = ajaxActionsURL + "&amp;action=initVideoEncoding";
var videoEncodeURL = ajaxActionsURL + "&amp;action=videoEncode";

var messages = {
  encode_succes: "The encoding process has been performed successfully.",
  encode_error: "An error occurred during the video encoding.",
  init_success: "The initialization phase succeed.",
  init_fail: "The initialization phase has failed.",
  retry: "please retry!",
  attachment_not_found: "No such attachment!",
  document_not_found: "No such document!",
  start_encoding: "Starting video encoding.",
  view_video: "View the video",
  attach_files: "Attaching encoded files to the document.",
  complete: "Complete",
  in_progress: "In progress",
  waiting_transcoding_worker: "Waiting for the transcoding worker"
};

// Configure require.js to use Bootstrap FileStyle (https://github.com/markusslima/bootstrap-filestyle)
require.config({
   "paths": { "bootstrap-filestyle": "$services.webjars.url('bootstrap-filestyle/1.2.1/src/bootstrap-filestyle.min.js')" }
});

var targetInput = $('videoInput');
var fileUploader;
if(targetInput) {
  fileUploader = new XWiki.FileUploader(targetInput, {
    autoUpload: true,
    progressAutohide: false,
    fileFilter: /video\/.*/
  });
}

require(['jquery', 'bootstrap-filestyle'], function($, btsfs){
function displaySuccess(selector, msg){
   $(selector).html('&lt;p class="bg-success"&gt;' + msg + '&lt;/p&gt;')
}

function displayError(selector, msg){
   $(selector).html('&lt;p class="bg-danger"&gt;' + msg + '&lt;/p&gt;')
}

function displayAjaxLoader(){;
   return '&lt;span class="glyphicon glyphicon-refresh glyphicon-refresh-animate"&gt;&lt;/span&gt;';
}

function displayProgressBar(val){
var html = '&lt;div class="progress"&gt;';
  html += '&lt;div class="progress-bar progress-bar-success progress-bar-striped" role="progressbar" aria-valuenow="' + val + '" aria-valuemin="0" aria-valuemax="100" style="width: ' + val + '%"&gt;';
  html += '&lt;span class="sr-only"&gt;' + val + '% Complete (success)&lt;/span&gt;';
  html += val +'%';
  html += '&lt;/div&gt;';
  html += '&lt;/div&gt;';
  return html;
}

function displayCommandsProgress(commands, status, resultsContainer){
   var details = "";
   if(status == "complete"){
      details = messages.complete;
   }
   else if(status == "waiting"){
      details = messages.waiting_transcoding_worker;
   }
   else if(status == "running"){
      details = messages.in_progress;
   }

   for(var i= 0;i&lt;commands.size();i++){
      var cmd = commands[i];
      var label = cmd.stream;
      if(label != "audio" &amp;&amp; label != "manifest"){
         label = "Video" + " " + label;
      }
      else if(label == "manifest"){
         label = "Manifest file";
      }
      resultsContainer.append('&lt;div&gt;&lt;strong&gt;' + label + ': &lt;/strong&gt;&lt;span class="progress-details"&gt;(' + details + ')&lt;/span&gt;' + displayProgressBar(cmd.progress) + '&lt;/div&gt;');
   }
}

// Function to check the video incoding progress
function checkVideoEncodingProcess(videoDocRef, videoName){
   var resultsContainer = $("#encoding-progress");
   var timer = setInterval(function(){
      $.ajax({
         url: videoEncodeURL + "&amp;videoDocRef=" + videoDocRef + "&amp;videoName=" + videoName,
         dataType: 'json'
      })
      .done(function(rep){
         resultsContainer.html("");
         if(rep){
            if(rep.completeCmds &amp;&amp; rep.completeCmds.size() &gt; 0){
               displayCommandsProgress(rep.completeCmds, "complete", resultsContainer);
            }
            if(rep.runingCmds &amp;&amp; rep.runingCmds.size() &gt; 0){
               displayCommandsProgress(rep.runingCmds, "running", resultsContainer);
            }
            if(rep.waitingCmds &amp;&amp; rep.waitingCmds.size() &gt; 0){
               displayCommandsProgress(rep.waitingCmds, "waiting", resultsContainer);
            }
         }
         if(rep.completeCmds.size() &gt; 0 &amp;&amp; rep.waitingCmds.size() == 0 &amp;&amp; rep.runingCmds.size() == 0){
            clearTimeout(timer);
            // Attach the generated video/audio/manifest files to the document
            $(resultsContainer).append('&lt;div&gt;' + displayAjaxLoader() + ' ' + messages.attach_files + ' ...&lt;/div&gt;');
            $.ajax({
               url: ajaxActionsURL + '&amp;action=attachEncodedFiles'  + "&amp;videoDocRef=" + videoDocRef + "&amp;videoName=" + videoName,
               dataType: 'json'
            }).done(function(rep){
               if(rep){
                  $(resultsContainer).html('&lt;div class="box successmessage"&gt;' + messages.encode_succes + ' &lt;a href="javascript: location.reload(true)"&gt;' + messages.view_video + '&lt;/a&gt;&lt;/div&gt;');
               }
            });
         }
      });
   }, 5000);
}

// Initialize the video upload inputs
$(".upload-video-input").filestyle({buttonName: "btn-primary", input: false, buttonText: "Select video", iconName: "glyphicon glyphicon-facetime-video", badge: false});

// Initialize the encode vide checkboxes
$("input.encode-video-chk").click(function(){
   var form = $(this).closest("form");
   if(form.size() &gt; 0){
      var formAction = form.attr("action");
      formAction = formAction.replace("&amp;encodeVideo=true", "");
      if($(this).is(":checked")){
         formAction = formAction + "&amp;encodeVideo=true";
      }
      form.attr("action", formAction);
      fileUploader.options.targetURL = formAction;
      fileUploader.formData.action = formAction;
   }
});

$(function(){
  // Check the encoding progress
  if($("#encodingInProgress").size() &gt; 0){
    var videoDocRef = $("#videoDocRef").val();
    var videoName = $("#videoName").val();
    checkVideoEncodingProcess(videoDocRef, videoName);
  }
  if($("#videoTargetDoc").size() &gt; 0){
    var targetDocRef = $("#videoTargetDoc").val();
    var form = $("#videoTargetDoc").closest("form");
    if(form.size() &gt; 0){
       var formAction = form.attr("action");
       formAction = formAction + "&amp;targetDocRef=" + encodeURIComponent(targetDocRef);
       form.attr("action", formAction);
       fileUploader.options.targetURL = formAction;
       fileUploader.formData.action = formAction;
    }
  }

  // Initialize encode button
  $("body").on("click", "#encode-video-btn", function(event){
     $("#videoInput").attr("disabled", true);
     $("#video-upload-form .bootstrap-filestyle").remove();
     $("#video-upload-form .video-uploader-container").css("padding-top", "0");
     $("#video-upload-form .file-info, #video-upload-form .progress-info").hide();
     $("#video-upload-form .upload-status").removeClass("upload-done");
     $("#video-upload-form .upload-status").addClass("upload-done-status");
     $("#video-upload-form .buttonwrapper").hide();
     require(['xwiki-meta'], function (xm) {
        var videoName = $("#video-select").val();
        var videoDocRef = xm.document;
        $("#encoding-progress").show();
        $("#encode-video-btn").attr("disabled", true);
        $.ajax({
           url: initVideoEncodingURL,
           method: "POST",
           dataType: "json",
           data: ({videoDocRef: videoDocRef, videoName: videoName})
        })
        .done(function(rep){
           $("#select-video-blk").hide();
           if(rep.initStatus){
              displaySuccess("#encoding-progress", messages.init_success + " ... " + displayAjaxLoader() + " " + messages.start_encoding);
              // Starting the video transcoding process
              checkVideoEncodingProcess(videoDocRef, videoName);
           }
           else
           {
              var errorMsg = messages.init_fail;
              if(rep.error != ""){
                 errorMsg += ", " + messages[rep.error];
                 displayError("#encoding-progress", errorMsg);
              }
           }
        }).fail(function(xhr, textStatus, errorThrown) {
           displayError("#encoding-progress", messages.init_fail + ", " + messages.retry);
           $("#encode-video-btn").attr("disabled", false);
        });
     });
  });
});
});</code>
    </property>
    <property>
      <name>Use HTML5 File Upload Widget</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>XWikiTubeCode.VideoUpload</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>9546a1f9-fe1e-4520-90f6-0aef9632bf69</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.video-uploader-container {
   position: relative;
   padding-top: 45px;
   overflow: hidden;
}
.video-uploader-container .encode-vid-txt {
    display: table-cell;
    background-color: #f5f5f5;
    padding: 0 5px;
    position: absolute;
    top: 2px;
    left: 132px;
    line-height: 43px;
}
.video-uploader-container .upload-result-container {
}
.video-uploader-container .bootstrap-filestyle.input-group{
    position: absolute;
    top: 0;
    left: 0;
}
.errormsg{
   color: red;
   font-size: 0.9em;
}
.bg-success, .bg-danger{
   padding: 15px;
}
.progress{
   width: 50%;
   height: 20px;
}
.progress .progress-bar {
    font-size: 14px !important;
    line-height: 14px !important;
    padding: 2px !important;
}
.progress-details{
   font-size: 12px;
   font-style: italic;
}
.upload-done-status{
   background: none;
   padding: 0;
}
.glyphicon-refresh-animate {
    -animation: spin .7s infinite linear;
    -webkit-animation: spin2 .7s infinite linear;
}
@-webkit-keyframes spin2 {
    from { -webkit-transform: rotate(0deg);}
    to { -webkit-transform: rotate(360deg);}
}
@keyframes spin {
    from { transform: scale(1) rotate(0deg);}
    to { transform: scale(1) rotate(360deg);}
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.WikiMacroClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>9</number>
        <prettyName>Macro code</prettyName>
        <rows>20</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentDescription>
        <disabled>0</disabled>
        <name>contentDescription</name>
        <number>8</number>
        <prettyName>Content description (Not applicable for "No content" type)</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </contentDescription>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>7</number>
        <prettyName>Macro content type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Optional|Mandatory|No content</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <defaultCategory>
        <disabled>0</disabled>
        <name>defaultCategory</name>
        <number>4</number>
        <prettyName>Default category</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultCategory>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>3</number>
        <prettyName>Macro description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <id>
        <disabled>0</disabled>
        <name>id</name>
        <number>1</number>
        <prettyName>Macro id</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </id>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Macro name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <supportsInlineMode>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>supportsInlineMode</name>
        <number>5</number>
        <prettyName>Supports inline mode</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </supportsInlineMode>
      <visibility>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>visibility</name>
        <number>6</number>
        <prettyName>Macro visibility</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Current User|Current Wiki|Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </visibility>
    </class>
    <name>XWikiTubeCode.VideoUpload</name>
    <number>0</number>
    <className>XWiki.WikiMacroClass</className>
    <guid>e703219d-228a-4529-af05-32062946ff4b</guid>
    <property>
      <code>{{include reference="XWikiTubeCode.Macros"/}}

{{velocity}}
#set($discard = $xwiki.jsx.use("XWikiTubeCode.VideoUpload"))
#set($discard = $xwiki.ssx.use("XWikiTubeCode.VideoUpload"))
###set($actionURL = $xwiki.getURL("XWikiTubeCode.VideoUpload", "view", "xpage=plain&amp;action=uploadVideo"))
#set($actionURL = $doc.getURL("upload"))
#set($xredirectURL = $xwiki.getURL("XWikiTubeCode.VideoUpload", "view", "xpage=plain&amp;action=selectVideo&amp;videoDocRef=${doc.getDocumentReference()}"))
#set($videoUploader = $xwiki.parseGroovyFromPage("XWikiTubeCode.VideoUploadGroovy"))
#set($discard = $videoUploader.init($xwiki, $xcontext, $services))
## Check FFmpeg installation
#set($ffmpeg = $videoUploader.mediaTranscoder.checkFFmpeg())
##check if there videos already attached the to document
#set($attachments = $doc.getAttachmentList())
#set($videoAttachments = [])
#foreach($att in $attachments)
   #if($att.getMimeType().contains("video"))
      #set($discard = $videoAttachments.add($att))
   #end
#end
{{html}}
#if($videoAttachments.size() == 0)
&lt;form action="$actionURL" id="video-upload-form" enctype="multipart/form-data" method="post"&gt;
&lt;div class="video-uploader-container"&gt;
   &lt;input type="file" id="videoInput" name="filepath" class="upload-video-input"/&gt;
   &lt;input type="hidden" name="form_token" value="$services.csrf.getToken()" /&gt;
   &lt;input type="hidden" name="xredirect" value="$xredirectURL" id="video-xredirect"/&gt;
   #if ("$!xcontext.macro.params.targetDoc" != '' &amp;&amp; $xwiki.exists($xcontext.macro.params.targetDoc))
      &lt;input type="hidden" id="videoTargetDoc" value="$xcontext.macro.params.targetDoc"/&gt;
   #end
   &lt;span class="encode-vid-txt"&gt;
      ##Encode the video after uploading &lt;input type="checkbox" value="1" name="encodeVideo" class="encode-video-chk"/&gt;
      #if(!$ffmpeg)
      &lt;span class="errormsg"&gt;(FFmpeg library is not installed on your server. FFmpeg is required to encode videos.)&lt;/span&gt;
      #end
   &lt;/span&gt;
&lt;/div&gt;
&lt;/form&gt;
{{/html}}
#else
   #displayVideoEncodeForm($videoAttachments){{/html}}
#end
{{/velocity}}</code>
    </property>
    <property>
      <contentDescription/>
    </property>
    <property>
      <contentType>No content</contentType>
    </property>
    <property>
      <defaultCategory/>
    </property>
    <property>
      <description>Display an input html element that allow you to upload videos and transcode them in order to play videos using DASH.

For each uploaded video an entry will be added in the XWikiTube application home page.</description>
    </property>
    <property>
      <id>videoupload</id>
    </property>
    <property>
      <name>Video upload</name>
    </property>
    <property>
      <supportsInlineMode>0</supportsInlineMode>
    </property>
    <property>
      <visibility>Current Wiki</visibility>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
    </class>
    <name>XWikiTubeCode.VideoUpload</name>
    <number>0</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>65e168f2-e343-427c-997f-9c727da8bc1e</guid>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>The document reference of target xwiki document in which the videos will be attached.
If this parameter is not mentioned when a document is created for each video.</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>targetDoc</name>
    </property>
  </object>
  <content>{{include reference="XWikiTubeCode.Macros"/}}

{{velocity}}
#* Upload and transcode files *#
#set($videoUploader = $xwiki.parseGroovyFromPage("XWikiTubeCode.VideoUploadGroovy"))
#set($discard = $videoUploader.init($xwiki, $xcontext, $services))
#set($discard = $xcontext.put("videoUploader", $videoUploader))
#set($action = $request.action)

#if ("$!action" != '')
   #if ($action == "uploadVideo")
      ## Check the video target document
      #set($targetDocRef = "")
      #if ("$!request.targetDocRef" != '' &amp;&amp; $xwiki.exists($request.targetDocRef))
         #set($targetDocRef = $request.targetDocRef)   
      #end
      #set($rep = $videoUploader.uploadVideo("videoInput", $targetDocRef))
      #if ($rep.ret == true)
         ## Display video information
         #displayVideoInfo($rep.video)
         ## Encode the video
         #set($ffmpeg = $videoUploader.mediaTranscoder.checkFFmpeg())
         #if ($ffmpeg)
              #set($video = $rep.video)
              #set($videoDocRef = $video.videoDocRef)
              #if("$!videoDocRef" != '' &amp;&amp; $xwiki.exists($videoDocRef))
                 #set($discard = $videoUploader.encodeVideo($videoDocRef, "libvpx-vp9"))
                 #set($videoDoc = $xwiki.getDocument($videoDocRef))
                 #set($videoObj = $videoDoc.getObject("XWikiTubeCode.MediaClass", "original", "1"))
                 #if("$!videoObj" != '')
                    #set($discard = $videoObj.set("encoded", 1))
                    #set($discard = $videoDoc.save())
                 #end
              #end
         #end
      #else
         #if($rep.error == "file_exists")
            {{warning}}The video name alreay exists.{{/warning}}
         #end
      #end
   #elseif($action == 'getXWikiTubeVideos')
      ## List all XWiki videos filtred by user
      #set($offset = $mathtool.toInteger($request.get('offset')))
      #set($offset = $offset - 1)
      #if($offset &lt; 0)
        #set($offset = 0)
      #end
      #set($limit = $mathtool.toInteger($request.get('limit')))
      #if(!$hasAdmin)
         #set($userFilter = " and doc.author=${xcontext.user}")
      #end
      #set($filterName = "$!{request.get('name')}")
      #if("$!filterName" != '')
         #set($filterNameCond = " and media.name like :filterName")
      #end
      #set($xwql = "from doc.object(XWikiTubeCode.MediaClass) as media where doc.fullName&lt;&gt;'XWikiTubeCode.MediaTemplate' and media.original=1 $!userFilter $!filterNameCond order by doc.creationDate")
      #set($query = $services.query.xwql($xwql))
      #if("$!filterName" != '')
         #set($query = $query.bindValue("filterName","%$filterName%"))   
      #end
      #set($totalRows = $query.count())  
      ##set($results = $query.setLimit($limit).setOffset($offset).execute())
      #set($results = $query.execute())
      #set($returnedRows = $results.size())
      ## ===
      ## JSON
      ## ===
      #set($rows = [])
      #foreach($mediaDocRef in $results)
         #set($mediaDoc = $xwiki.getDocument($mediaDocRef))
         #set($mediaObj = $mediaDoc.getObject("XWikiTubeCode.MediaClass"))
         #set($name = $mediaObj.getValue("name"))
         #set($extension = $mediaObj.getValue("extension"))
         #set($mimeType = $mediaObj.getValue("mimeType"))
         #set($size = $mathtool.div($mediaObj.getValue("size"), 1000000))
         #set($duration = $mediaObj.getValue("duration"))
         #set($resolution = $mediaObj.getValue("resolution"))
         #set($creator = $xwiki.getUserName($mediaDoc.author, false))
         #set($creationDate = $xwiki.formatDate($mediaDoc.creationDate))
         #set($encoded = "False")
         #if($mediaObj.getValue("encoded") == "1")
            #set($encoded = "True")
         #end
         #set($mediaURL = $xwiki.getURL($mediaDocRef))
         #set($actionLinks = "&lt;div class='actionsrow'&gt;")
         #set($actionLinks = "${actionLinks}&lt;div class='actionsrow'&gt;&lt;a href='$mediaURL' rel='${mediaDocRef}' class='glyphicon glyphicon-play' title='Play'&gt;&lt;/a&gt;")
         #if($hasAdmin || ($xcontext.user == $mediaDoc.author))
            #set($actionLinks = "${actionLinks}&lt;a href='javascript:;' rel='${mediaDocRef}' class='glyphicon glyphicon-cog' title='Encode'&gt;&lt;/a&gt;")
            #set($actionLinks = "${actionLinks}&lt;a href='javascript:;' rel='${mediaDocRef}' class='glyphicon glyphicon-trash delete-media' title='Delete'&gt;&lt;/a&gt;")
         #end
         #set($actionLinks = "${actionLinks}&lt;/div&gt;") 
         #set($row = {"doc_viewable": true, "name": $name, "extension": $extension, "mimeType": $mimeType, "size": "${size} MB", "duration": "${duration} s", "resolution": $resolution, "creator": "$creator", "creationDate": $creationDate, "encoded": $encoded, "actions": $actionLinks})
         #set($discard = $rows.add($row))
      #end
      {
      "totalrows": $totalRows,
      "matchingtags": {},
      "tags" : [],
      "returnedrows": $returnedRows,
      "offset": ($offset + 1),
      "reqNo": $mathtool.toInteger($request.reqNo),
      "rows": $jsontool.serialize($rows)
      }
   #elseif($action == 'deleteMedia')
      #if("$!request.mediaDocRef" != "" &amp;&amp; $xwiki.exists($request.mediaDocRef))
         #set($mediaDocRef = $request.mediaDocRef)
         #set($rep = $videoUploader.deleteMedia($mediaDocRef))
         $rep
      #end
   #elseif($action == 'selectVideo')
      #if("$!request.videoDocRef" != "" &amp;&amp; $xwiki.exists($request.videoDocRef))
         #set($videoDocRef = $request.videoDocRef)
         #set($videoDoc = $xwiki.getDocument($videoDocRef))
         #set($attachments = $videoDoc.getAttachmentList())
         #set($videoAttachments = [])
         #foreach($att in $attachments)
            #if($att.getMimeType().contains("video"))
               #set($discard = $videoAttachments.add($att))
            #end
         #end
         {{html}}#displayVideoEncodeForm($videoAttachments){{/html}}
      #end
   #elseif($action == 'initVideoEncoding')
      #if("$!request.videoDocRef" != '' &amp;&amp; $xwiki.exists($request.videoDocRef) &amp;&amp; "$!request.videoName" != '')
         #set($videoDocRef = $request.videoDocRef)
         #set($videoName = $request.videoName)
         #set($rep = $videoUploader.encodeAttachmentVideo($videoDocRef, $videoName))
         {"initStatus": $rep.ret, "error": "$!rep.error"}
      #end
   #elseif($action == 'videoEncode')
      #if("$!request.videoDocRef" != '' &amp;&amp; $xwiki.exists($request.videoDocRef) &amp;&amp; "$!request.videoName" != '')
         #set($videoDocRef = $request.videoDocRef)
         #set($videoName = $request.videoName)
         #set($videoDoc = $xwiki.getDocument($videoDocRef))
         #set($waitingCommands = $videoDoc.getObjects("XWikiTubeCode.CommandClass", "status", "waiting"))
         #set($completeCommands = $videoDoc.getObjects("XWikiTubeCode.CommandClass", "status", "complete"))
         #set($runingCommands = $videoDoc.getObjects("XWikiTubeCode.CommandClass", "status", "transcoding"))

         ## Check waiting commands
         #set($waitingCmdsJSON = [])
         #if($waitingCommands.size() &gt; 0)
            ## Check if there is no runing command and check also if FFmpeg is not runing
            #set($ffmpegRunning = $videoUploader.mediaTranscoder.checkFFmpegRunning())
            #if(!$ffmpegRunning &amp;&amp; $runingCommands.size() == 0)
               ## Start a new command
               #set($nextCmd = $waitingCommands[0])
               #if($nextCmd.outputFile != "" &amp;&amp; !$nextCmd.outputFile.contains("manifest"))
                  ## video and audio streams commands
                  #set($rep = $videoUploader.commandRunner.run(["bash", "-c", $nextCmd.getValue("cmd")], '', 2147483647))
                  ## Update the status of the command object
                  #set($cmdObj = $videoDoc.getObject("XWikiTubeCode.CommandClass", "outputFile", $nextCmd.outputFile))
                  #if($cmdObj)
                     #set($discard = $cmdObj.set("status", "transcoding"))
                     #set($discard = $videoDoc.save())
                  #end
               #elseif($nextCmd.outputFile.contains("manifest"))
                  ## Manifest file command
                  ## Generate the manifest command and update the command object
                  #set($manifestCmd = $videoUploader.mediaTranscoder.generateDASHManifestCommand($nextCmd.getValue("workDir")))
                  #set($rep = $videoUploader.commandRunner.run(["bash", "-c", $manifestCmd], '', 2147483647))
                  ## Update the status/cmd properties of the command object
                  #set($cmdObj = $videoDoc.getObject("XWikiTubeCode.CommandClass", "outputFile", $nextCmd.outputFile))
                  #if($cmdObj)
                     #set($discard = $cmdObj.set("status", "transcoding"))
                     #set($discard = $cmdObj.set("cmd", $manifestCmd))
                     #set($discard = $videoDoc.save())
                  #end
               #end
            #end
            #foreach($cmd in $waitingCommands)
               #set($discard = $waitingCmdsJSON.add({"progress": 0, "stream": $cmd.outputFile.replace("_output.txt", "")}))
            #end
         #end

         ## Check runing commands
         #set($runingCmdsJSON = [])
         #foreach($cmd in $runingCommands)
            #set($outputFilePath = "${cmd.workDir}/${cmd.outputFile}")
            #set($progressRep = $videoUploader.checkEncodingProgress($outputFilePath, $cmd.getValue("duration")))
            #if($progressRep.status == "end") ## Command complete
               ## Update the command object
               #set($cmdObj = $videoDoc.getObject("XWikiTubeCode.CommandClass", "outputFile", $cmd.outputFile))
               #if($cmdObj)
                  #set($discard = $cmdObj.set("status", "complete"))
                  #set($discard = $videoDoc.save())
               #end
               #set($discard = $runingCmdsJSON.add({"progress": 100, "stream": $cmd.outputFile.replace("_output.txt", "")}))
            #else
               #set($discard = $runingCmdsJSON.add({"progress": $progressRep.progress, "stream": $cmd.outputFile.replace("_output.txt", "")}))
            #end
         #end
         ##

         ## Check complete commands
         #set($completeCmdsJSON = [])
         #foreach($cmd in $completeCommands)
            #set($discard = $completeCmdsJSON.add({"progress": 100, "stream": $cmd.outputFile.replace("_output.txt", "")}))
         #end
         ##
         $jsontool.serialize({"waitingCmds": $waitingCmdsJSON, "completeCmds": $completeCmdsJSON, "runingCmds": $runingCmdsJSON})
      #end
   #elseif($action == 'attachEncodedFiles')
      #if("$!request.videoDocRef" != '' &amp;&amp; $xwiki.exists($request.videoDocRef) &amp;&amp; "$!request.videoName" != '')
         #set($videoDocRef = $request.videoDocRef)
         #set($videoName = $request.videoName)
         #set($videoDoc = $xwiki.getDocument($videoDocRef))
         #set($originalVideoObj = $videoDoc.getObject("XWikiTubeCode.MediaClass", "original", 1))
         #if($originalVideoObj &amp;&amp; $originalVideoObj.getValue("name") == $videoName &amp;&amp; $originalVideoObj.getValue("encoded") != 1)
            ## Start files attachments
            #set($videoDir = $originalVideoObj.getValue("dirPath"))
            #set($rep = $videoUploader.attachEncodingFilesToDoc($videoDir, $videoDocRef, $videoName))
            $rep
         #end
      #end
   #end
#end
{{/velocity}}</content>
</xwikidoc>
