<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>XWikiTubeCode</web>
  <name>MediaTranscoderGroovy</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1441868628000</creationDate>
  <parent>XWikiTubeCode.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1441869423000</date>
  <contentUpdateDate>1441869395000</contentUpdateDate>
  <version>1.1</version>
  <title>MediaTranscoderGroovy</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>/**
* Groovy class : MediaTranscoder 
* This class is used to decode, encode, transcode, stream video and audio media, it is used the FFmpeg library.
*/

import java.io.File;
import java.io.FileOutputStream;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.FileUtils;
import java.util.ArrayList;

class MediaTranscodeClass
{
   def xwiki;
   def xcontext;
   def services;
   def commandRunner;
   FilenameUtils fileNameUtils;
   FileUtils FileUtils;
   // Video settings for 16:9 format
   def recommendedVideoEncodingSettings = [
              ["description" : "2160p", "type": "standard frame bitrate", "bitrate": ["35000k","45000k"], "frameRate": ["24", "25", "30"], "resolution": "3840x2160", "width": 3840, "height": 2160],
              ["description" : "1440p", "type": "standard frame bitrate", "bitrate": "16000k", "frameRate": ["24", "25", "30"], "resolution": "2560x1440", "width": 2560, "height": 1440],
              ["description" : "1080p", "type": "standard frame bitrate", "bitrate": "8000k", "frameRate": ["24", "25", "30"], "resolution": "1920x1080", "width": 1920, "height": 1080],
              ["description" : "720p", "type": "standard frame bitrate", "bitrate": "5000k", "frameRate": ["24", "25", "30"], "resolution": "1280x720", "width": 1280, "height": 720],
              ["description" : "480p", "type": "standard frame bitrate", "bitrate": "2500k", "frameRate": ["24", "25", "30"], "resolution": "854x480", "width": 854, "height": 480],
              ["description" : "360p", "type": "standard frame bitrate", "bitrate": "1000k", "frameRate": ["24", "25", "30"], "resolution": "640x360", "width": 640, "height": 360],
              ["description" : "240p", "type": "standard frame bitrate", "bitrate": ["300k", "700k"], "frameRate": ["24", "25", "30"], "resolution": "426x240", "width": 426, "height": 240]
           ];
   def recommendedAudioEncodingSettings = [
                                ["description" : "Mono", "bitrate": "128k"],
                                ["description" : "Stereo", "bitrate": "384k"],
                                ["description" : "5.1", "bitrate": "512k"]
                             ];

   /** Initialize the class */
   void init(xwiki, xcontext, services)
   {
      this.xwiki = xwiki;
      this.xcontext = xcontext;
      this.services = services;
      this.commandRunner = services.commandRunner;
      this.fileNameUtils = new FilenameUtils();
      this.fileUtils = new FileUtils();
   }
   
   /**
   * Check the ffmpeg installation
   * 
   * @return FFmpeg installed version if FFmpeg installed, false otherwise. 
   */
   def checkFFmpeg(){
      def rep = false;
      def cmd = "ffmpeg -version";
      def result = this.commandRunner.run(cmd, '', 10000);
      if(result.error == 'none' &amp;&amp; result.ret == "0"){
         rep = result.stdout;
      }
      return rep;
   }

   /**
   * Check if ffmpeg is running
   * The method is to list all FFmpeg processes and their states and check if there is at least one process running.
   *
   * @return true if ffmpeg is running, false otherwise.
   */
   def checkFFmpegRunning(){
      def rep = false;
      ArrayList&lt;String&gt; cmd = new ArrayList&lt;String&gt;();
      cmd.add("bash");
      cmd.add("-c");
      cmd.add("ps -eo fname,s | grep ffmpeg");
      def result = this.commandRunner.run(cmd, '', 2147483647);
      if(result.error == 'none' &amp;&amp; result.ret == "0"){
         String[] lines = result.stdout.split(System.getProperty("line.separator"));
         def i = 0;
         def stop = false;
         while (i &lt; lines.size() &amp;&amp; !stop) {
            def line = lines[i];
            def processState = line.replace("ffmpeg ", "");
            // Check the process state: (T: stopped, X: dead, Z: zombie ),
            if(processState != "T" &amp;&amp; processState != "X" &amp;&amp; processState != "Z"){
               stop = false;
               rep = true;
            }
            i++;
         }
      }
      return rep;
   }

   /**
   * Return the duration of a video
   * 
   * @param videoPath the path of the video file in the filesystem
   * @param format the format of the returned value
   * format = 's' the duration is in seconds
   * format='hms' the duration is in 'HOURS:MM:SS.MICROSECONDS' time unit format
   * @return the duration of the video 
   * return the duration if the command excuted successfully or -1 otherwise.
   */
   def getVideoDuration(videoPath, format = 's'){
      def durationFormat = (format == 'hms') ? '-sexagesimal' : '';
      ArrayList&lt;String&gt; cmdAL = new ArrayList&lt;String&gt;();
      cmdAL.add('ffprobe');
      cmdAL.add('-v');
      cmdAL.add('error');
      cmdAL.add('-show_entries');
      cmdAL.add('format=duration');
      cmdAL.add('-of');
      cmdAL.add('default=noprint_wrappers=1:nokey=1');
      if(durationFormat != ''){
         cmdAL.add(durationFormat);
      }
      cmdAL.add(videoPath);
      def result = this.commandRunner.run(cmdAL, '', 1000);
      def rep = -1;
      if(result.error == 'none'){
         rep = result.stdout;
         if(format == 's'){
            rep = (rep != "") ? rep.toFloat() : 0;//Duration in secondes
         }
      }
      return rep;
   }

   /**
   * Return the bitrate of a video
   * 
   * @param videoPath the path of the video file in the filesystem
   * @return the bitrate of the video (kbps) 
   * return the bitrate if the command excuted successfully or -1 otherwise.
   */
   def getVideoBitrate(videoPath){
      ArrayList&lt;String&gt; cmdAL = new ArrayList&lt;String&gt;();
      cmdAL.add('ffprobe');
      cmdAL.add('-v');
      cmdAL.add('error');
      cmdAL.add('-show_entries');
      cmdAL.add('format=bit_rate');
      cmdAL.add('-of');
      cmdAL.add('default=noprint_wrappers=1:nokey=1');
      cmdAL.add(videoPath);
      def result = this.commandRunner.run(cmdAL, '', 1000);
      def rep = -1;
      if(result.error == 'none'){
         rep = result.stdout;
         rep = (rep != "") ? Math.floor(rep.toInteger()/1000).toInteger() : 0;// Return Integer
      }
      return rep;
   }
   
   /**
   * Return the size of a video
   * 
   * @param videoPath the path of the video file in the filesystem
   * @param sizeUnit the unit of the returned size (B : default, KB, MB, GB)
   * @return the size of the video 
   * return the size if the command excuted successfully or -1 otherwise.
   */
   def getVideoSize(videoPath, sizeUnit = 'B'){
      def sizeUnits = ['KB', 'MB', 'GB'];
      ArrayList&lt;String&gt; cmdAL = new ArrayList&lt;String&gt;();
      cmdAL.add('ffprobe');
      cmdAL.add('-v');
      cmdAL.add('error');
      cmdAL.add('-show_entries');
      cmdAL.add('format=size');
      cmdAL.add('-of');
      cmdAL.add('default=noprint_wrappers=1');
      cmdAL.add(videoPath);
      def result = this.commandRunner.run(cmdAL, '', 1000);
      def rep = -1;
      if(result.error == 'none'){
         rep = result.stdout.replace('size=', '');
         rep = rep != '' ? rep.toLong() : 0;
         if(sizeUnit != 'B' &amp;&amp; sizeUnits.contains(sizeUnit)){
            if(sizeUnit == 'KB'){
               rep = rep/(1000);
            }
            else if(sizeUnit == 'MB'){
               rep = rep/(1000*1000);
            }
            else if(sizeUnit == 'GB'){
               rep = rep/(1000*1000*1000);
            }
         }
      }
      return rep;
   }

   /**
   * Return the resolution of a video
   * 
   * @param videoPath the path of the video file in the filesystem
   * @param retMode the type of the returned value
   * retMode == 'arr', the returned value is an array containing the video resolution info [W,H]
   * retMode == 's', the returned value is a string widthxHeight
   * @return the resolution of the video (WidthxHeight) in pixels
   * return the resolution if the command excuted successfully or -1 otherwise.
   */
   def getVideoResolution(videoPath, retMode = 'arr'){
      ArrayList&lt;String&gt; cmdAL = new ArrayList&lt;String&gt;();
      cmdAL.add('ffprobe');
      cmdAL.add('-v');
      cmdAL.add('error');
      cmdAL.add('-of');
      cmdAL.add('flat=s=_');
      cmdAL.add('-select_streams');
      cmdAL.add('v:0');
      cmdAL.add('-show_entries');
      cmdAL.add('stream=height,width');
      cmdAL.add(videoPath);
      def result = this.commandRunner.run(cmdAL, '', 1000);
      def rep = -1;
      if(result.error == 'none'){
         rep = result.stdout.replace("streams_stream_0_width=", "").replace("streams_stream_0_height=", "");
         rep = rep.split("\n");
         if(retMode == 's' &amp;&amp; rep.size() == 2){
            rep = rep[0] + "x" + rep[1];
         }
      }
      return rep;
   }

   /**
   * Generate the video encoding command
   * @param videoPath the path of the video file in the filesystem
   * @param targetVideoDir the target directory that will contains the encoded video
   * @param option the video encoding options (Resolution, bitrate ...)
   * @param videoCodec the codec that will be used to encode the source video
   * @return the ffmpeg encoding command 
   */
   def generateVideoEncodingCommand(videoPath, targetVideoDir, options, videoCodec = "libvpx-vp9"){
      ArrayList&lt;String&gt; cmdAL = new ArrayList&lt;String&gt;();
      if(videoCodec == "libvpx-vp9"){
         cmdAL.add('ffmpeg');
         cmdAL.add('-y');
         cmdAL.add('-progress');
         def outputFilename = options.resolution + "_output" + ".txt";
         cmdAL.add(targetVideoDir + '/' + outputFilename);
         cmdAL.add('-i');
         cmdAL.add(videoPath);
         cmdAL.add('-c:v');
         cmdAL.add('libvpx-vp9');
         // Resolution
         cmdAL.add('-s');
         cmdAL.add(options.width.toString() + "x" + options.height.toString());
         // Bitrate
         def bitrate = (options.bitrate instanceof String) ? options.bitrate : options.bitrate[0] + '-' + options.bitrate[1];
         if(options.bitrate instanceof String){
            cmdAL.add('-b:v');
            cmdAL.add(options.bitrate);
         }
         else
         {
            cmdAL.add('-minrate');
            cmdAL.add(options.bitrate[0]);
            cmdAL.add('-maxrate');
            cmdAL.add(options.bitrate[1]);
         }
         // other parameters
         cmdAL.add('-keyint_min');
         cmdAL.add('150');
         cmdAL.add('-g');
         cmdAL.add('150');
         // Dash parameters
         cmdAL.add('-tile-columns');
         cmdAL.add('4');
         cmdAL.add('-frame-parallel');
         cmdAL.add('1');
         cmdAL.add('-an');
         cmdAL.add('-f');
         cmdAL.add('webm');
         cmdAL.add('-dash');
         cmdAL.add('1');
         // Target video name
         cmdAL.add(targetVideoDir + '/' + 'video_' + options.resolution + '_' + bitrate + '.webm');
         // Run command in background
         cmdAL.add("&gt; /dev/null 2&gt;&amp;1 &lt; /dev/null &amp;");
      }
      return this.implodeArrayList(cmdAL, " ");
   }

   /**
   * Generate the flv video encoding command
   * @param videoPath the path of the video file in the filesystem
   * @param targetVideoDir the target directory that will contains the encoded video
   * @param option the video encoding options (Resolution, bitrate ...)
   * @return the ffmpeg encoding command 
   */
   def generateFlvEncodingCommand(videoPath, targetVideoDir, options){
      ArrayList&lt;String&gt; cmdAL = new ArrayList&lt;String&gt;();
      cmdAL.add('ffmpeg');
      cmdAL.add('-y');
      cmdAL.add('-progress');
      def outputFilename = "flv_output.txt";
      cmdAL.add(targetVideoDir + '/' + outputFilename);
      cmdAL.add('-i');
      cmdAL.add(videoPath);
      cmdAL.add('-c:v');
      cmdAL.add('libx264');
      // Bitrate
      if(options.bitrate instanceof String){
         cmdAL.add('-b:v');
         cmdAL.add(options.bitrate);
      }
      else
      {
         cmdAL.add('-b:v');
         cmdAL.add(options.bitrate[0]);
      }
      // Resolution
      cmdAL.add('-s');
      cmdAL.add(options.width.toString() + "x" + options.height.toString());
      // other parameters
      cmdAL.add('-f');
      cmdAL.add('flv');
      // Target video name
      cmdAL.add(targetVideoDir + '/' + 'video.flv');
      // Run command in background
      cmdAL.add("&gt; /dev/null 2&gt;&amp;1 &lt; /dev/null &amp;");
      return this.implodeArrayList(cmdAL, " ");
   }

   /**
   * Generate the audio encoding command
   * @param audioPath the path of the video/audio file in the filesystem
   * @param targetAudioDir the target directory that will contains the encoded audio
   * @param option the audio encoding options (Bitrate ...)
   * @param audioCodec the codec that will be used to encode the source audio
   * @return the ffmpeg encoding command 
   */
   def generateAudioEncodingCommand(audioPath, targetAudioDir, options, audioCodec = "libvorbis"){
      ArrayList&lt;String&gt; cmdAL = new ArrayList&lt;String&gt;();
      if(audioCodec == "libvorbis"){
         cmdAL.add('ffmpeg');
         cmdAL.add('-y');
         cmdAL.add('-progress');
         def outputFilename = "audio_output.txt";
         cmdAL.add(targetAudioDir + '/' + outputFilename);
         cmdAL.add('-i');
         cmdAL.add(audioPath);
         cmdAL.add('-c:a');
         cmdAL.add('libvorbis');
         // Bitrate
         def bitrate = (options.bitrate instanceof String) ? options.bitrate : options.bitrate[0];
         cmdAL.add('-b:a');
         cmdAL.add(bitrate);
         // other parameters
         cmdAL.add('-vn');
         cmdAL.add('-f');
         cmdAL.add('webm');
         // Dash parameters
         cmdAL.add('-dash');
         cmdAL.add('1');
         // Target video name
         cmdAL.add(targetAudioDir + '/' + 'audio_' + bitrate + '.webm');
         // Run command in background
         cmdAL.add("&gt; /dev/null 2&gt;&amp;1 &lt; /dev/null &amp;");
      }
      return this.implodeArrayList(cmdAL, " ");
   }
  
   /**
   * Get the list of adequate encoding settings of a given video
   * @param videoPath the path of the video file in the filesystem
   * @return the list of settings 
   */
   def getVideoEncodingSettingsList(videoPath){
      def settings = [];
      def resolution = this.getVideoResolution(videoPath);
      if(resolution &amp;&amp; resolution.size() == 2){
         def sourceW = resolution[0].toInteger();
         def sourceH = resolution[1].toInteger();
         for(options in this.recommendedVideoEncodingSettings){
            if(options.width &lt;= sourceW){
               // Get target width and height
               def res = this.getVideoTargetResolution(sourceW, sourceH, options.width, options.height);
               if(res &amp;&amp; res.size() == 2){
                  options.width = res.targetW;
                  options.height = res.targetH;
                  settings.add(options);
               }
            }
         }
      }
      return settings;
   }

   /**
   * Encode a video : generate all video and audio stream
   * @param videoPath the path of the video file in the filesystem
   * @param targetVideoDir the target directory that will contains the encoded files
   * @param videoCodec the codec that will be used to encode the source video
   */
   void encodeVideo(videoPath, targetVideoDir, videoCodec="libvpx-vp9", videoEncodingSettings = null){
      if(videoEncodingSettings == null){
         // Generate the list of options
         videoEncodingSettings = this.getVideoEncodingSettingsList(videoPath);
      }
      if(videoCodec == "libvpx-vp9"){
         // Generate videos streams
         for(options in videoEncodingSettings){
            def cmd = generateVideoEncodingCommand(videoPath, targetVideoDir, options, videoCodec);
            runVideoEncoding(cmd);
            def bitrate = (options.bitrate instanceof String) ? options.bitrate : options.bitrate[0] + '-' + options.bitrate[1];
         }
         // Generate audio stream
         def cmd = generateAudioEncodingCommand(videoPath, targetVideoDir, this.recommendedAudioEncodingSettings[0]);
         runAudioEncoding(cmd);
         // Generate the flv vidéo with the lowest quality that will be played if the browser do not support MSE.
         def lowQualityOptions = videoEncodingSettings[videoEncodingSettings.size() - 1];
         cmd = generateFlvEncodingCommand(videoPath, targetVideoDir, lowQualityOptions);
         runVideoEncoding(cmd);
         // Generate manifest.mpd file
         def manifestCmd = this.generateDASHManifestCommand(targetVideoDir);
         runVideoEncoding(manifestCmd);
      }
   }

   /**
   * Generate encoding commands
   * @param videoPath the path of the video file in the filesystem
   * @param targetVideoDir the target directory that will contains the encoded files
   * @param videoCodec the codec that will be used to encode the source video
   */
   def generateEncodingCommands(videoPath, targetVideoDir, videoCodec="libvpx-vp9", videoEncodingSettings = null){
      def commands = [];
      if(videoEncodingSettings == null){
         // Generate the list of options
         videoEncodingSettings = this.getVideoEncodingSettingsList(videoPath);
      }
      // Generate videos streams commands
      for(options in videoEncodingSettings){
         def cmd = generateVideoEncodingCommand(videoPath, targetVideoDir, options, videoCodec);
         def outputFilename = options.resolution + "_output" + ".txt";
         commands.add(["command": cmd, "workDir": targetVideoDir, "outputFile": outputFilename]);
      }
      // Generate audio stream command
      def cmd = generateAudioEncodingCommand(videoPath, targetVideoDir, this.recommendedAudioEncodingSettings[0]);
      commands.add(["command": cmd, "workDir": targetVideoDir, "outputFile": "audio_output.txt"]);
      // Generate the flv video with the lowest quality that will be played if the browser do not support MSE.
      def lowQualityOptions = videoEncodingSettings[videoEncodingSettings.size() - 1];
      cmd = generateFlvEncodingCommand(videoPath, targetVideoDir, lowQualityOptions);
      commands.add(["command": cmd, "workDir": targetVideoDir, "outputFile": "flv_output.txt"]);
      // Generate manifest.mpd file command
      //def manifestCmd = this.generateDASHManifestCommand(targetVideoDir);
      // Set the manifest file command to "", it will be generated once all the other steams are created.
      commands.add(["command": "", "workDir": targetVideoDir, "outputFile": "manifest_output.txt"]);
      return commands;
   }

   /**
   * Run video encoding command
   * @param cmd the video encoding command to execute
   */
   def runVideoEncoding(cmd){
      def timeOut = 2147483647;//Todo: calculate the estimated time of the video encode
      this.commandRunner.run(cmd, '', timeOut);
   }
   
   /**
   * Run audio encoding command
   * @param cmd the audio encoding command to execute
   */
   def runAudioEncoding(cmd){
      def timeOut = 2147483647;//Todo: calculate the estimated time of the audio encode
      this.commandRunner.run(cmd, '', timeOut);
   }

   /**
   * Extract image from a video
   * @param videoPath path of the video
   * @param targetDir path of the directory where the image will be saved, 
   * by defaut it is the home directory of the user
   * @param imageFormat format of the image (by default: jpg)
   */   
  
   def extractImageFromVideo(videoPath, targetDir = "", imageFormat = "jpg"){
      def cmd;
      if(targetDir !=  ""){
         cmd = "ffmpeg -i " + videoPath + " -frames:v 1 -ss 00:01:00 -f image2 " + targetDir + "/image." + imageFormat;
      }
      else
      {
         cmd = "ffmpeg -i " + videoPath + " -frames:v 1 -ss 00:01:00 -f image2 ~/image." + imageFormat;
      }
      return this.commandRunner.run(cmd, '', 100000);
   }

   /**
   * Get the target resolution for a source video based on a desired target resolution
   * that repect the original ratio
   * @param sourceW source video width
   * @param sourceH source video height
   * @param dTargetW desired video width
   * @param dTargetH desired video height
   * @return target video with and height [W, H]
   */   
   def getVideoTargetResolution(sourceW, sourceH, dTargetW, dTargetH){
      def targetW = dTargetW;
      def targetH = dTargetH;
      def h = Math.round( (dTargetW/sourceW)*sourceH );
      def w = Math.round( (dTargetH/sourceH)*sourceW );
      if(h &gt; dTargetH){
         targetW = w;
      }
      else{
         targetH = h;
      }
      return ["targetW": targetW, "targetH": targetH];
   }  

   /**
   * Generate the DASH manifest xml file command
   * @param streamDirectory the directory that contains all video and audio stream files
   * @return the created manifest file path
   */
   def generateDASHManifestCommand(streamsDirectory){
      ArrayList&lt;String&gt; cmdAL = new ArrayList&lt;String&gt;();
      // Check if the directory exists
      File dir = new File(streamsDirectory);
      if(dir.exists()){
         String[] ext = new String[1];
         ext[0] = "webm";
         def streams = this.fileUtils.listFiles(dir, ext, true);
         if(streams.size() &gt; 0){
            // Sort all stream by size
            streams = streams.findAll { it.isFile() }.sort { it.length() };
            def audioStream = streams[0].getPath();
            cmdAL.add('ffmpeg');
            cmdAL.add('-y');
            cmdAL.add('-progress');
            def outputFilename = "manifest_output.txt";
            cmdAL.add(streamsDirectory + '/' + outputFilename) ;
            ArrayList&lt;String&gt; param1AL = new ArrayList&lt;String&gt;();
            param1AL.add('-c');
            param1AL.add('copy');
            ArrayList&lt;String&gt; param2AL = new ArrayList&lt;String&gt;();
            param2AL.add('-adaptation_sets');
            param2AL.add('"id=0,streams=0');
            def i = 0;
            for(stream in streams){
               if(stream.getPath() != audioStream){
                  cmdAL.add('-f');
                  cmdAL.add('webm_dash_manifest');
                  cmdAL.add('-i');
                  cmdAL.add(stream.getPath());
                  param1AL.add('-map');
                  param1AL.add(i.toString());
                  if(i &gt; 0){
                     if(i &lt;= streams.size() - 1){
                        param2AL.set(1, param2AL.get(1) + ',' + i.toString());
                     }
                  }
                  i++;
               }
            }
            cmdAL.add('-f');
            cmdAL.add('webm_dash_manifest');
            cmdAL.add('-i');
            cmdAL.add(audioStream);
            param1AL.add('-map');
            param1AL.add((streams.size() -1).toString());
            param2AL.set(1, param2AL.get(1) + ' id=1,streams=' + (streams.size() -1).toString() + '"');
            cmdAL.addAll(param1AL);
            cmdAL.add('-f');
            cmdAL.add('webm_dash_manifest');
            cmdAL.addAll(param2AL);
            cmdAL.add(streamsDirectory + '/manifest.mpd');
            // Run command in background
            cmdAL.add("&gt; /dev/null 2&gt;&amp;1 &lt; /dev/null &amp;");
         }
      }
      return this.implodeArrayList(cmdAL, " ");
   }
   
   /**
   * Format a video duration
   * 
   * @param duration in seconds
   * @return String
   */
   def formatDuration(duration) {
      def seconds = Math.floor(duration).toInteger();
      def rep = "";
      if(seconds % 3600 == 0){
         rep = (seconds/3600).toString() + ":00:00";
      }
      else
      {
         def hours = Math.floor(seconds/3600).toInteger();
         if((seconds - hours*3600)%60 == 0){
            rep = hours.toString() + ":" + ((seconds - hours*3600)/60).toString() + ":00"; 
         }
         else
         {
            def minutes = Math.floor((seconds - hours*3600)/60).toInteger();
            def s = seconds - (hours*3600 + minutes*60);
            rep = hours.toString() + ":" + minutes + ":" + s;
         }
      }
      return rep;
   }

   /**
   * Method to join array elements of type string
   * @param inputArray Array which contains strings
   * @param glueString String between each array element
   * @return String containing all array elements seperated by glue string
   */
   String implodeArrayList(ArrayList&lt;String&gt; AL, String glueString) {
      String output = "";
      if (AL.size() &gt; 0) {
	StringBuilder sb = new StringBuilder();
	sb.append(AL[0]);
        for (int i=1; i&lt;AL.size(); i++) {
	   sb.append(glueString);
           sb.append(AL[i]);
	}
	output = sb.toString();
      }
      return output;
   }
}</content>
</xwikidoc>
